// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List View Tests should pass customProps to the Item 1`] = `
<ListItem
  className="ListItem"
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
        ]
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a comment 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <ItemComment
          isTruncated={false}
          text="comment"
        />
      }
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a list item chevron 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <ItemComment
          isTruncated={false}
          text="comment"
        />
      }
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <p>
          end
        </p>
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      startAccessory={
        <p>
          start
        </p>
      }
      textEmphasis="default"
    />
  }
  hasChevron={true}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a single children 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
        ]
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a start accessory 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      startAccessory={
        <p>
          start
        </p>
      }
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with all elements 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <ItemComment
          isTruncated={false}
          text="comment"
        />
      }
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <p>
          end
        </p>
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      startAccessory={
        <p>
          start
        </p>
      }
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with an end accessory 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      endAccessory={
        <p>
          end
        </p>
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with children 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with list item styles 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignTop"
      comment={
        <ItemComment
          isTruncated={false}
          text="comment"
        />
      }
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <p>
          end
        </p>
      }
      isTruncated={true}
      layout="twoColumns"
      reserveStartAccessorySpace={false}
      startAccessory={
        <p>
          start
        </p>
      }
      textEmphasis="start"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a default Item 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;

exports[`List View Tests should render a selectable Item 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <ItemComment
          isTruncated={false}
          text="comment"
        />
      }
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <p>
          end
        </p>
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      startAccessory={
        <p>
          start
        </p>
      }
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelectable={true}
  isSelected={false}
  tabIndex={0}
/>
`;

exports[`List View Tests should render a selected Item 1`] = `
<TableRow
  isSelected={true}
>
  <TableCell
    className="content-accessory content-accessory-align-center"
    content={
      <p>
        start
      </p>
    }
    key="start_accessory"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 2"
      />
    }
    key="display_2/.1"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 3"
      />
    }
    key="display_3/.2"
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
    key="comment"
  />
  <TableCell
    className="content-accessory content-end-accessory content-accessory-align-center"
    content={
      <p>
        end
      </p>
    }
    key="end_accessory"
  />
</TableRow>
`;

exports[`Table View Tests should pass customProps to the Item 1`] = `
<TableRow
  className="TableRow"
  isSelected={false}
>
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item that ignores list item styles 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory content-accessory-align-top"
    content={
      <p>
        start
      </p>
    }
    key="start_accessory"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 2"
      />
    }
    key="display_2/.1"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 3"
      />
    }
    key="display_3/.2"
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
    key="comment"
  />
  <TableCell
    className="content-accessory content-end-accessory content-accessory-align-top"
    content={
      <p>
        end
      </p>
    }
    key="end_accessory"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item that ignores the list item chevron 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <ItemComment
          isTruncated={false}
          text="comment"
        />
      }
      displays={
        Array [
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            iconAlignment="center"
            isDisabled={false}
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <p>
          end
        </p>
      }
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      startAccessory={
        <p>
          start
        </p>
      }
      textEmphasis="default"
    />
  }
  hasChevron={true}
  isSelected={false}
/>
`;

exports[`Table View Tests should render a Item with a comment 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
    key="comment"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with a single children 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with a start accessory 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory content-accessory-align-center"
    content={
      <p>
        start
      </p>
    }
    key="start_accessory"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with all elements 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory content-accessory-align-center"
    content={
      <p>
        start
      </p>
    }
    key="start_accessory"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 2"
      />
    }
    key="display_2/.1"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 3"
      />
    }
    key="display_3/.2"
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
    key="comment"
  />
  <TableCell
    className="content-accessory content-end-accessory content-accessory-align-center"
    content={
      <p>
        end
      </p>
    }
    key="end_accessory"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with an end accessory 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory content-end-accessory content-accessory-align-center"
    content={
      <p>
        end
      </p>
    }
    key="end_accessory"
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with children 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 2"
      />
    }
    key="display_2/.1"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 3"
      />
    }
    key="display_3/.2"
  />
</TableRow>
`;

exports[`Table View Tests should render a default Item 1`] = `
<TableRow
  isSelected={false}
/>
`;

exports[`Table View Tests should render a selectable Item 1`] = `
<TableRow
  isSelectable={true}
  isSelected={false}
  tabIndex={0}
>
  <TableCell
    className="content-accessory content-accessory-align-center"
    content={
      <p>
        start
      </p>
    }
    key="start_accessory"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 2"
      />
    }
    key="display_2/.1"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 3"
      />
    }
    key="display_3/.2"
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
    key="comment"
  />
  <TableCell
    className="content-accessory content-end-accessory content-accessory-align-center"
    content={
      <p>
        end
      </p>
    }
    key="end_accessory"
  />
</TableRow>
`;

exports[`Table View Tests should render a selected Item 1`] = `
<TableRow
  isSelected={true}
>
  <TableCell
    className="content-accessory content-accessory-align-center"
    content={
      <p>
        start
      </p>
    }
    key="start_accessory"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 1"
      />
    }
    key="display_1/.0"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 2"
      />
    }
    key="display_2/.1"
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        iconAlignment="center"
        isDisabled={false}
        isTruncated={false}
        text="Display 3"
      />
    }
    key="display_3/.2"
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
    key="comment"
  />
  <TableCell
    className="content-accessory content-end-accessory content-accessory-align-center"
    content={
      <p>
        end
      </p>
    }
    key="end_accessory"
  />
</TableRow>
`;

exports[`should render a default Item 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      reserveStartAccessorySpace={false}
      textEmphasis="default"
    />
  }
  hasChevron={false}
  isSelected={false}
/>
`;
